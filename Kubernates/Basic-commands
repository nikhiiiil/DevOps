- kubectl get nodes -o wide
- kubectl cluster-info
- kubectl get all
- kubectl get pods --all-namespaces

TO CREATE A POD:
- kubectl run nginx --image=nginx
- kubectl create -f pod-defination.yaml

To DESCRIBE:
- kubernates describe pod pod-name
- kubernates describe service service-name
- kubernates describe replicaset replicaset-name

To GET:
- kubectl get pods -o wide
- kubectl get service
- kubectl get deployments
- kubectl get replicaset
- kubectl get all
- kubectl get pod --selector app=frontend
- kubectl get all --selector env=prod,bu=finance,tier=frontend
- kubectl get jobs

TO CREATE:
- kubectl create -f defination.yaml
- kubectl replace -f defination.yaml

TO Create Service:
1. kubectl expose pod redis --port=6379 --name redis-service --dry-run=client -o yaml
2. kubectl create service clusterip redis --tcp=6379:6379 --dry-run=client -o yaml
3. kubectl expose pod nginx --port=80 --name nginx-service --type=NodePort --dry-run=client -o yaml
4. kubectl create service nodeport nginx --tcp=80:80 --node-port=30080 --dry-run=client -o yaml
5. kubectl expose deployment nginx --port=80 --target-port=8000
Note: kubectl expose uses pod labels as service labels & kubectl create service doesnt use pods labels

TO SCALE:
- kubectl scale --replicas=3 defination.yaml -n namespace
- kubectl edit rs my-rs-name
- kubectl scale replicaset repliaset-name --replicas=3 
- kubectl edit deployment my-deployment-name
- kubectl scale deployment deployment-name --replicas=3

TO UPDATE:
- kubectl apply -f defination.yaml
- kubectl set image deployment/myapp-deployment-name container=newimage:0.0.2

TO ROLLOUT:
- kubectl rollout status deployment/myapp-deployment-name
- kubectl rollout history deployment/myapp-deployment-name
- kubectl rollout undo deployment/myapp-deployment-name
- kubectl rollout history deployment nginx --revision=1
- kubectl set image deployment nginx nginx=nginx:1.17 --record

Strategies for Rollout:
1. Recreate -> deletes all togethere and brings all new up , application down for period
2. Rolling update -> delete one update one , default strategy

Dry Run:
1. kubectl create ns my-namespace --dry-run -o yaml

Taint Node:
- kubectl taint node nodename key=value:taint-effect
  taint-effects: NoSchedule|PreferNoSchedule|NoExecute
1. kubectl taint nodes controlplane node-role.kubernetes.io/master:NoSchedule

UnTaint Node:
kubectl taint nodes controlplane node-role.kubernetes.io/master:NoSchedule-

Taint & Tolerations:
1. Taints are applied to nodes
2. Tolerations are applied to pods

NODE SELECTORS:
1. label a node with command 
   kubectl label nodes node01 key=value
2. add node selectors in pod defination 

NODE AFFINITY:
- To ensure pods are placed on particular nodes.
 
MULTI-CONTAINER Pods:
- 3 design patterns
  1. Side Car 
  2. Ambassador
  3. Adapter
- pod defination would be same add into container array

INGRESS:
- By default kubernates cluster doesnt come with Ingress, so even if you configure ingress it doesnt work.
- you need to install IngressController 
- If ingress controller is installed, then it automatially looks for all ingress files present within the cluster.
- in 3 ways you can write a ingress file
  1. default service 
  2. with different hostnames, for each host 1 rule has to be written
  3. 1 host, different paths, for we map 1 service to eachpath
- You may deploy any number of ingress controllers within a cluster. When you create an ingress, you should annotate each 
  ingress with the appropriate ingress.class to indicate which ingress controller should be used if more than one exists within your cluster.

NETWORK POLICY:
- By default, all pods within cluster can communicate with each other
- Ingress request: request comming into pod
  EGress request: request going out of pod 
- we apply network policy onto pod for some security purposes 

To check connectivity:
- "nc -zvw servicename/ip port"

To Use private docker registry we need to create secret in cluster:
- kubectl create secret docker-regisry --docker-server=$DOCKER_REGISTRY_SERVER \
  --docker-username=$DOCKER_USER --docker-password=$DOCKER_PASSWORD --docker-email=$DOCKER_EMAIL

Monitoring Cluster:
tools to monitor cluster and pods
1. metrics-server
2. prometheus
3. elastic-stack 
- kubectl addons enable metrics-server
- git clone https://github.com/kodekloudhub/kubernetes-metrics-server.git
- 3 node cluster download yaml from git and run it

Commands to Get cluster info
- kubectl top node
- kubectl top pod

IMPERATIVE COMMANDS:
1. kubectl run nginx --image=nginx
2. kubectl create deployment nginx --image=nginx --replicas=3
3. kubectl run redis --image=redis:alpine --labels=tier=db,name=myapp -o yaml --dry-run=client
4. kubectl run custom-nginx --image=nginx --port=8080
5. kubectl run https --image=httpd:alpine --port=80 --expose       // creates pods and service
6. kubectl create secret generic mysecret --from-literal=key1=value1 --from-literal=key2=value2 --namespace=mynamespace 
7. kubectl create secret generic mySecretFromFile --from-file=appication.properties
8. kubectl create configmap app-config --from-literal=user=nikhil
9. kubectl create job thow-dice-job --image=kodekloud/throw-dice -o yaml --dry-run=client
10. kubectl create cronjob throw-dice-cron-job --image=kodekloud/throw-dice --schedule="30 21 * * *"
11. kubectl explain job --recursive | less
12. kubectl create ingress <ingress-name> --rule="host/path=service:port"
13. kubectl create ingress ingress-test --rule="wear.my-online-store.com/wear*=wear-service:80"

To set default Namespace of Cluster
1. kubectl config set-context $(kubectl config current-context) --namespace=myNamespace

Important COMMANDS:
1. kubectl api-resources
2. kubectl get NetworkPolicy

OUTPUT:

NAME                              SHORTNAMES   APIVERSION                             NAMESPACED   KIND
bindings                                       v1                                     true         Binding
componentstatuses                 cs           v1                                     false        ComponentStatus      
configmaps                        cm           v1                                     true         ConfigMap
endpoints                         ep           v1                                     true         Endpoints
events                            ev           v1                                     true         Event
limitranges                       limits       v1                                     true         LimitRange
namespaces                        ns           v1                                     false        Namespace
nodes                             no           v1                                     false        Node
persistentvolumeclaims            pvc          v1                                     true         PersistentVolumeClaim
persistentvolumes                 pv           v1                                     false        PersistentVolume     
pods                              po           v1                                     true         Pod
podtemplates                                   v1                                     true         PodTemplate
replicationcontrollers            rc           v1                                     true         ReplicationController
resourcequotas                    quota        v1                                     true         ResourceQuota
secrets                                        v1                                     true         Secret
serviceaccounts                   sa           v1                                     true         ServiceAccount
services                          svc          v1                                     true         Service
mutatingwebhookconfigurations                  admissionregistration.k8s.io/v1        false        MutatingWebhookConfiguration
validatingwebhookconfigurations                admissionregistration.k8s.io/v1        false        ValidatingWebhookConfiguration
customresourcedefinitions         crd,crds     apiextensions.k8s.io/v1                false        CustomResourceDefinition
apiservices                                    apiregistration.k8s.io/v1              false        APIService
controllerrevisions                            apps/v1                                true         ControllerRevision
daemonsets                        ds           apps/v1                                true         DaemonSet
deployments                       deploy       apps/v1                                true         Deployment
replicasets                       rs           apps/v1                                true         ReplicaSet
statefulsets                      sts          apps/v1                                true         StatefulSet
tokenreviews                                   authentication.k8s.io/v1               false        TokenReview
localsubjectaccessreviews                      authorization.k8s.io/v1                true         LocalSubjectAccessReview
selfsubjectaccessreviews                       authorization.k8s.io/v1                false        SelfSubjectAccessReview
selfsubjectrulesreviews                        authorization.k8s.io/v1                false        SelfSubjectRulesReview
subjectaccessreviews                           authorization.k8s.io/v1                false        SubjectAccessReview
horizontalpodautoscalers          hpa          autoscaling/v1                         true         HorizontalPodAutoscaler
cronjobs                          cj           batch/v1                               true         CronJob
jobs                                           batch/v1                               true         Job
certificatesigningrequests        csr          certificates.k8s.io/v1                 false        CertificateSigningRequest
leases                                         coordination.k8s.io/v1                 true         Lease
endpointslices                                 discovery.k8s.io/v1                    true         EndpointSlice
events                            ev           events.k8s.io/v1                       true         Event
ingresses                         ing          extensions/v1beta1                     true         Ingress
flowschemas                                    flowcontrol.apiserver.k8s.io/v1beta1   false        FlowSchema
prioritylevelconfigurations                    flowcontrol.apiserver.k8s.io/v1beta1   false        PriorityLevelConfiguration
ingressclasses                                 networking.k8s.io/v1                   false        IngressClass
ingresses                         ing          networking.k8s.io/v1                   true         Ingress
networkpolicies                   netpol       networking.k8s.io/v1                   true         NetworkPolicy
runtimeclasses                                 node.k8s.io/v1                         false        RuntimeClass
poddisruptionbudgets              pdb          policy/v1                              true         PodDisruptionBudget
podsecuritypolicies               psp          policy/v1beta1                         false        PodSecurityPolicy
clusterrolebindings                            rbac.authorization.k8s.io/v1           false        ClusterRoleBinding
clusterroles                                   rbac.authorization.k8s.io/v1           false        ClusterRole
rolebindings                                   rbac.authorization.k8s.io/v1           true         RoleBinding
roles                                          rbac.authorization.k8s.io/v1           true         Role
priorityclasses                   pc           scheduling.k8s.io/v1                   false        PriorityClass
csidrivers                                     storage.k8s.io/v1                      false        CSIDriver
csinodes                                       storage.k8s.io/v1                      false        CSINode
csistoragecapacities                           storage.k8s.io/v1beta1                 true         CSIStorageCapacity
storageclasses                    sc           storage.k8s.io/v1                      false        StorageClass
volumeattachments                              storage.k8s.io/v1                      false        VolumeAttachment

2. kubectl explain deployment
OUTPUT:

KIND:     Deployment
VERSION:  apps/v1

DESCRIPTION:
     Deployment enables declarative updates for Pods and ReplicaSets.

FIELDS:
   apiVersion   <string>
     APIVersion defines the versioned schema of this representation of an
     object. Servers should convert recognized schemas to the latest internal
     value, and may reject unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources  

   kind <string>
     Kind is a string value representing the REST resource this object
     represents. Servers may infer this from the endpoint the client submits
     requests to. Cannot be updated. In CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds

   metadata     <Object>
     Standard object metadata.

   spec <Object>
     Specification of the desired behavior of the Deployment.

   status       <Object>
     Most recently observed status of the Deployment.
